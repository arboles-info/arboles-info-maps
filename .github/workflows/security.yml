name: Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Ejecutar análisis de seguridad diariamente a las 2:00 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Análisis de vulnerabilidades con CodeQL
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # Análisis de dependencias Python
  python-security:
    name: Python Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
    
    - name: Run safety check (vulnerabilidades en dependencias)
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Run bandit (análisis de código Python)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
    
    - name: Run semgrep (análisis estático avanzado)
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto .
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: python-security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  # Análisis de secretos y credenciales
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Necesario para truffleHog
    
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Análisis de vulnerabilidades en dependencias JavaScript
  javascript-security:
    name: JavaScript Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install npm audit tools
      run: |
        npm install -g npm-audit-html
        npm install -g retire
    
    - name: Check for vulnerable JavaScript libraries
      run: |
        # Crear package.json temporal si no existe
        if [ ! -f package.json ]; then
          echo '{"name": "arboles-info-maps", "version": "1.0.0", "dependencies": {}}' > package.json
        fi
        
        # Ejecutar npm audit
        npm audit --audit-level=moderate --json > npm-audit-report.json || true
        npm audit --audit-level=moderate
        
        # Ejecutar retire.js para detectar librerías vulnerables
        retire --path ./static --outputformat json --outputpath retire-report.json || true
        retire --path ./static
    
    - name: Upload JavaScript security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: javascript-security-reports
        path: |
          npm-audit-report.json
          retire-report.json

  # Análisis de configuración y permisos
  configuration-security:
    name: Configuration Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install security tools
      run: |
        pip install checkov
        npm install -g @gitguardian/ggshield
    
    - name: Run Checkov (análisis de infraestructura)
      run: |
        checkov -d . --framework dockerfile --output json --output-file-path checkov-report.json || true
        checkov -d . --framework dockerfile
    
    - name: Run GitGuardian Shield (análisis de secretos)
      run: |
        ggshield secret scan path . --json --output ggshield-report.json || true
        ggshield secret scan path .
    
    - name: Check file permissions
      run: |
        echo "Checking file permissions..."
        find . -type f -name "*.py" -exec ls -la {} \; | grep -E "^-rwx" && echo "WARNING: Found executable Python files" || echo "No executable Python files found"
        find . -type f -name "*.sh" -exec ls -la {} \; | grep -E "^-rwx" && echo "Shell scripts are executable" || echo "WARNING: Shell scripts are not executable"
    
    - name: Upload configuration security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: configuration-security-reports
        path: |
          checkov-report.json
          ggshield-report.json

  # Análisis de licencias
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install license checking tools
      run: |
        pip install pip-licenses
        pip install -r requirements.txt
    
    - name: Check Python package licenses
      run: |
        pip-licenses --format=json --output-file=python-licenses.json
        pip-licenses --format=table
        echo "Checking for potentially problematic licenses..."
        pip-licenses | grep -i "gpl\|agpl\|copyleft" && echo "WARNING: Found copyleft licenses" || echo "No copyleft licenses found"

  # Resumen de seguridad
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, python-security, secrets-scan, javascript-security, configuration-security, license-check]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Job Results" >> security-summary.md
        echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-summary.md
        echo "- Python Security: ${{ needs.python-security.result }}" >> security-summary.md
        echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-summary.md
        echo "- JavaScript Security: ${{ needs.javascript-security.result }}" >> security-summary.md
        echo "- Configuration Security: ${{ needs.configuration-security.result }}" >> security-summary.md
        echo "- License Check: ${{ needs.license-check.result }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## Reports Generated" >> security-summary.md
        find . -name "*.json" -type f | while read file; do
          echo "- $(basename "$file"): $(wc -l < "$file") lines" >> security-summary.md
        done
        
        cat security-summary.md
    
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
